[build-system]
# A list of packages that are needed to build your package:
requires = ["setuptools"]  # REQUIRED if [build-system] table is used
# The name of the Python object that frontends will use to perform the build:
build-backend = "setuptools.build_meta"  # If not defined, then legacy behavior can happen.


[project.urls]
Homepage = "https://github.com/BluePadraig/RecuFiscalAuto"

[project]
name = "recu_fiscal_auto"  # REQUIRED, is the only field that cannot be marked as dynamic.

version = "1.0.0"

description = "Générateur automatique de eçus fiscaux"

##readme = "README.md"

requires-python = ">=3.12"

# This is either text indicating the license for the distribution, or a file
# that contains the license.
# https://packaging.python.org/en/latest/specifications/core-metadata/#license
#license = {file = "LICENSE.txt"}

authors = [
  {name = "Patrick LAVERNHE", email = "author@example.com" }
]

maintainers = [
  {name = "Patrick LAVERNHE", email = "maintainer@example.com" }
]

# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 4 - Beta",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",

  # Pick your license as you wish
  "License :: OSI Approved :: MIT License",

  "Programming Language :: Python :: 3",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
  "fillpdf",
  "openpyxl",
  "pandas",
  "pyinstaller"
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Optional dependencies the project provides. These are commonly
# referred to as "extras". For a more extensive definition see:
# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras
#
# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
#[project.scripts]
#sample = "sample:main"

# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
#[tool.setuptools]
# If there are data files included in your packages that need to be
# installed, specify them here.
#package-data = {"sample" = ["*.dat"]}